{-# LANGUAGE GADTs, KindSignatures, DataKinds #-}
module AbsGrammar (Tree(..), Literal, Expr, SepExprList, MarkExprList, Type, MarkTypeList, LetPattern, MarkLetPatternList, LetDecl, FunDecl, Parameter, SepParameterList, IfElse, IfStmt, Loop, Stmt, Block, Program, Ident, Boolean, johnMajorEq, module ComposOp) where

import ComposOp

import Data.Monoid (mappend)


-- Haskell module generated by the BNF converter

data Tag = Literal_ | Expr_ | SepExprList_ | MarkExprList_ | Type_ | MarkTypeList_ | LetPattern_ | MarkLetPatternList_ | LetDecl_ | FunDecl_ | Parameter_ | SepParameterList_ | IfElse_ | IfStmt_ | Loop_ | Stmt_ | Block_ | Program_ | Ident_ | Boolean_
type Literal = Tree Literal_
type Expr = Tree Expr_
type SepExprList = Tree SepExprList_
type MarkExprList = Tree MarkExprList_
type Type = Tree Type_
type MarkTypeList = Tree MarkTypeList_
type LetPattern = Tree LetPattern_
type MarkLetPatternList = Tree MarkLetPatternList_
type LetDecl = Tree LetDecl_
type FunDecl = Tree FunDecl_
type Parameter = Tree Parameter_
type SepParameterList = Tree SepParameterList_
type IfElse = Tree IfElse_
type IfStmt = Tree IfStmt_
type Loop = Tree Loop_
type Stmt = Tree Stmt_
type Block = Tree Block_
type Program = Tree Program_
type Ident = Tree Ident_
type Boolean = Tree Boolean_

data Tree :: Tag -> * where
    LiteralBool :: Boolean -> Tree Literal_
    LiteralI32 :: Integer -> Tree Literal_
    ExprAssign :: Expr -> Expr -> Tree Expr_
    ExprOr :: Expr -> Expr -> Tree Expr_
    ExprAnd :: Expr -> Expr -> Tree Expr_
    ExprEq :: Expr -> Expr -> Tree Expr_
    ExprNotEq :: Expr -> Expr -> Tree Expr_
    ExprLess :: Expr -> Expr -> Tree Expr_
    ExprAdd :: Expr -> Expr -> Tree Expr_
    ExprSub :: Expr -> Expr -> Tree Expr_
    ExprMul :: Expr -> Expr -> Tree Expr_
    ExprDiv :: Expr -> Expr -> Tree Expr_
    ExprMod :: Expr -> Expr -> Tree Expr_
    ExprNeg :: Expr -> Tree Expr_
    ExprDeref :: Expr -> Tree Expr_
    ExprNot :: Expr -> Tree Expr_
    ExprRef :: Expr -> Tree Expr_
    ExprMutRef :: Expr -> Tree Expr_
    ExprLiteral :: Literal -> Tree Expr_
    ExprIdent :: Ident -> Tree Expr_
    ExprCall :: Ident -> SepExprList -> Tree Expr_
    ExprArrayLookup :: Expr -> Expr -> Tree Expr_
    ExprTupleLookup :: Expr -> Integer -> Tree Expr_
    ExprIfElse :: IfElse -> Tree Expr_
    ExprBlock :: Block -> Tree Expr_
    ExprArrayElems :: MarkExprList -> Tree Expr_
    ExprArrayRepeat :: Expr -> Integer -> Tree Expr_
    ExprArrayRange :: Integer -> Integer -> Tree Expr_
    ExprTupleCons :: MarkExprList -> Tree Expr_
    SepExprNil :: Tree SepExprList_
    SepExprOne :: Expr -> Tree SepExprList_
    SepExprMore :: Expr -> SepExprList -> Tree SepExprList_
    SepExprHead :: Expr -> Tree SepExprList_
    SepExprTail :: SepExprList -> Expr -> Tree SepExprList_
    MarkENil :: Tree MarkExprList_
    MarkEOne :: Expr -> Tree MarkExprList_
    MarkEMore :: Expr -> MarkExprList -> Tree MarkExprList_
    MarkEHead :: Expr -> Tree MarkExprList_
    MarkETail :: MarkExprList -> Expr -> Tree MarkExprList_
    TypeBool :: Tree Type_
    TypeI32 :: Tree Type_
    TypeRef :: Type -> Tree Type_
    TypeMutRef :: Type -> Tree Type_
    TypeArray :: Type -> Integer -> Tree Type_
    TypeTuple :: MarkTypeList -> Tree Type_
    MarkTNil :: Tree MarkTypeList_
    MarkTOne :: Type -> Tree MarkTypeList_
    MarkTMore :: Type -> MarkTypeList -> Tree MarkTypeList_
    MarkTHead :: Type -> Tree MarkTypeList_
    MarkTTail :: MarkTypeList -> Type -> Tree MarkTypeList_
    PatternIdent :: Ident -> Tree LetPattern_
    PatternIgnore :: Tree LetPattern_
    PatternTuple :: MarkLetPatternList -> Tree LetPattern_
    MarkPatternNil :: Tree MarkLetPatternList_
    MarkPatternOne :: LetPattern -> Tree MarkLetPatternList_
    MarkPatternMore :: LetPattern -> MarkLetPatternList -> Tree MarkLetPatternList_
    MarkPatternHead :: LetPattern -> Tree MarkLetPatternList_
    MarkPatternTail :: MarkLetPatternList -> LetPattern -> Tree MarkLetPatternList_
    DeclLetType :: LetPattern -> Type -> Expr -> Tree LetDecl_
    DeclLet :: LetPattern -> Expr -> Tree LetDecl_
    FunDecl :: Ident -> SepParameterList -> Block -> Tree FunDecl_
    FunDeclType :: Ident -> SepParameterList -> Type -> Block -> Tree FunDecl_
    Parameter :: Ident -> Type -> Tree Parameter_
    SepPNil :: Tree SepParameterList_
    SepPOne :: Parameter -> Tree SepParameterList_
    SepPMore :: Parameter -> SepParameterList -> Tree SepParameterList_
    SepPHead :: Parameter -> Tree SepParameterList_
    SepPTail :: SepParameterList -> Parameter -> Tree SepParameterList_
    IfElse :: Expr -> Block -> Block -> Tree IfElse_
    IfStmt :: Expr -> Block -> Tree IfStmt_
    LoopInf :: Block -> Tree Loop_
    LoopWhile :: Expr -> Block -> Tree Loop_
    LoopForIterable :: Ident -> Expr -> Block -> Tree Loop_
    LoopForRange :: Ident -> Expr -> Expr -> Block -> Tree Loop_
    StmtLet :: LetDecl -> Tree Stmt_
    StmtFnDecl :: FunDecl -> Tree Stmt_
    StmtExpr :: Expr -> Tree Stmt_
    StmtBreak :: Tree Stmt_
    StmtContinue :: Tree Stmt_
    StmtIf :: IfStmt -> Tree Stmt_
    StmtIfElse :: IfElse -> Tree Stmt_
    StmtLoop :: Loop -> Tree Stmt_
    BlockStmt :: [Stmt] -> Tree Block_
    BlockExpr :: [Stmt] -> Expr -> Tree Block_
    Program :: [FunDecl] -> Tree Program_
    Ident :: String -> Tree Ident_
    Boolean :: String -> Tree Boolean_

instance Compos Tree where
  compos r a f t = case t of
      LiteralBool boolean -> r LiteralBool `a` f boolean
      ExprAssign expr0 expr1 -> r ExprAssign `a` f expr0 `a` f expr1
      ExprOr expr0 expr1 -> r ExprOr `a` f expr0 `a` f expr1
      ExprAnd expr0 expr1 -> r ExprAnd `a` f expr0 `a` f expr1
      ExprEq expr0 expr1 -> r ExprEq `a` f expr0 `a` f expr1
      ExprNotEq expr0 expr1 -> r ExprNotEq `a` f expr0 `a` f expr1
      ExprLess expr0 expr1 -> r ExprLess `a` f expr0 `a` f expr1
      ExprAdd expr0 expr1 -> r ExprAdd `a` f expr0 `a` f expr1
      ExprSub expr0 expr1 -> r ExprSub `a` f expr0 `a` f expr1
      ExprMul expr0 expr1 -> r ExprMul `a` f expr0 `a` f expr1
      ExprDiv expr0 expr1 -> r ExprDiv `a` f expr0 `a` f expr1
      ExprMod expr0 expr1 -> r ExprMod `a` f expr0 `a` f expr1
      ExprNeg expr -> r ExprNeg `a` f expr
      ExprDeref expr -> r ExprDeref `a` f expr
      ExprNot expr -> r ExprNot `a` f expr
      ExprRef expr -> r ExprRef `a` f expr
      ExprMutRef expr -> r ExprMutRef `a` f expr
      ExprLiteral literal -> r ExprLiteral `a` f literal
      ExprIdent ident -> r ExprIdent `a` f ident
      ExprCall ident sepexprlist -> r ExprCall `a` f ident `a` f sepexprlist
      ExprArrayLookup expr0 expr1 -> r ExprArrayLookup `a` f expr0 `a` f expr1
      ExprTupleLookup expr integer -> r ExprTupleLookup `a` f expr `a` r integer
      ExprIfElse ifelse -> r ExprIfElse `a` f ifelse
      ExprBlock block -> r ExprBlock `a` f block
      ExprArrayElems markexprlist -> r ExprArrayElems `a` f markexprlist
      ExprArrayRepeat expr integer -> r ExprArrayRepeat `a` f expr `a` r integer
      ExprTupleCons markexprlist -> r ExprTupleCons `a` f markexprlist
      SepExprOne expr -> r SepExprOne `a` f expr
      SepExprMore expr sepexprlist -> r SepExprMore `a` f expr `a` f sepexprlist
      SepExprHead expr -> r SepExprHead `a` f expr
      SepExprTail sepexprlist expr -> r SepExprTail `a` f sepexprlist `a` f expr
      MarkEOne expr -> r MarkEOne `a` f expr
      MarkEMore expr markexprlist -> r MarkEMore `a` f expr `a` f markexprlist
      MarkEHead expr -> r MarkEHead `a` f expr
      MarkETail markexprlist expr -> r MarkETail `a` f markexprlist `a` f expr
      TypeRef type' -> r TypeRef `a` f type'
      TypeMutRef type' -> r TypeMutRef `a` f type'
      TypeArray type' integer -> r TypeArray `a` f type' `a` r integer
      TypeTuple marktypelist -> r TypeTuple `a` f marktypelist
      MarkTOne type' -> r MarkTOne `a` f type'
      MarkTMore type' marktypelist -> r MarkTMore `a` f type' `a` f marktypelist
      MarkTHead type' -> r MarkTHead `a` f type'
      MarkTTail marktypelist type' -> r MarkTTail `a` f marktypelist `a` f type'
      PatternIdent ident -> r PatternIdent `a` f ident
      PatternTuple markletpatternlist -> r PatternTuple `a` f markletpatternlist
      MarkPatternOne letpattern -> r MarkPatternOne `a` f letpattern
      MarkPatternMore letpattern markletpatternlist -> r MarkPatternMore `a` f letpattern `a` f markletpatternlist
      MarkPatternHead letpattern -> r MarkPatternHead `a` f letpattern
      MarkPatternTail markletpatternlist letpattern -> r MarkPatternTail `a` f markletpatternlist `a` f letpattern
      DeclLetType letpattern type' expr -> r DeclLetType `a` f letpattern `a` f type' `a` f expr
      DeclLet letpattern expr -> r DeclLet `a` f letpattern `a` f expr
      FunDecl ident sepparameterlist block -> r FunDecl `a` f ident `a` f sepparameterlist `a` f block
      FunDeclType ident sepparameterlist type' block -> r FunDeclType `a` f ident `a` f sepparameterlist `a` f type' `a` f block
      Parameter ident type' -> r Parameter `a` f ident `a` f type'
      SepPOne parameter -> r SepPOne `a` f parameter
      SepPMore parameter sepparameterlist -> r SepPMore `a` f parameter `a` f sepparameterlist
      SepPHead parameter -> r SepPHead `a` f parameter
      SepPTail sepparameterlist parameter -> r SepPTail `a` f sepparameterlist `a` f parameter
      IfElse expr block0 block1 -> r IfElse `a` f expr `a` f block0 `a` f block1
      IfStmt expr block -> r IfStmt `a` f expr `a` f block
      LoopInf block -> r LoopInf `a` f block
      LoopWhile expr block -> r LoopWhile `a` f expr `a` f block
      LoopForIterable ident expr block -> r LoopForIterable `a` f ident `a` f expr `a` f block
      LoopForRange ident expr0 expr1 block2 -> r LoopForRange `a` f ident `a` f expr0 `a` f expr1 `a` f block2
      StmtLet letdecl -> r StmtLet `a` f letdecl
      StmtFnDecl fundecl -> r StmtFnDecl `a` f fundecl
      StmtExpr expr -> r StmtExpr `a` f expr
      StmtIf ifstmt -> r StmtIf `a` f ifstmt
      StmtIfElse ifelse -> r StmtIfElse `a` f ifelse
      StmtLoop loop -> r StmtLoop `a` f loop
      BlockStmt stmts -> r BlockStmt `a` foldr (a . a (r (:)) . f) (r []) stmts
      BlockExpr stmts expr -> r BlockExpr `a` foldr (a . a (r (:)) . f) (r []) stmts `a` f expr
      Program fundecls -> r Program `a` foldr (a . a (r (:)) . f) (r []) fundecls
      _ -> r t

instance Show (Tree c) where
  showsPrec n t = case t of
    LiteralBool boolean -> opar n . showString "LiteralBool" . showChar ' ' . showsPrec 1 boolean . cpar n
    LiteralI32 integer -> opar n . showString "LiteralI32" . showChar ' ' . showsPrec 1 integer . cpar n
    ExprAssign expr0 expr1 -> opar n . showString "ExprAssign" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprOr expr0 expr1 -> opar n . showString "ExprOr" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprAnd expr0 expr1 -> opar n . showString "ExprAnd" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprEq expr0 expr1 -> opar n . showString "ExprEq" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprNotEq expr0 expr1 -> opar n . showString "ExprNotEq" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprLess expr0 expr1 -> opar n . showString "ExprLess" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprAdd expr0 expr1 -> opar n . showString "ExprAdd" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprSub expr0 expr1 -> opar n . showString "ExprSub" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprMul expr0 expr1 -> opar n . showString "ExprMul" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprDiv expr0 expr1 -> opar n . showString "ExprDiv" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprMod expr0 expr1 -> opar n . showString "ExprMod" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprNeg expr -> opar n . showString "ExprNeg" . showChar ' ' . showsPrec 1 expr . cpar n
    ExprDeref expr -> opar n . showString "ExprDeref" . showChar ' ' . showsPrec 1 expr . cpar n
    ExprNot expr -> opar n . showString "ExprNot" . showChar ' ' . showsPrec 1 expr . cpar n
    ExprRef expr -> opar n . showString "ExprRef" . showChar ' ' . showsPrec 1 expr . cpar n
    ExprMutRef expr -> opar n . showString "ExprMutRef" . showChar ' ' . showsPrec 1 expr . cpar n
    ExprLiteral literal -> opar n . showString "ExprLiteral" . showChar ' ' . showsPrec 1 literal . cpar n
    ExprIdent ident -> opar n . showString "ExprIdent" . showChar ' ' . showsPrec 1 ident . cpar n
    ExprCall ident sepexprlist -> opar n . showString "ExprCall" . showChar ' ' . showsPrec 1 ident . showChar ' ' . showsPrec 1 sepexprlist . cpar n
    ExprArrayLookup expr0 expr1 -> opar n . showString "ExprArrayLookup" . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . cpar n
    ExprTupleLookup expr integer -> opar n . showString "ExprTupleLookup" . showChar ' ' . showsPrec 1 expr . showChar ' ' . showsPrec 1 integer . cpar n
    ExprIfElse ifelse -> opar n . showString "ExprIfElse" . showChar ' ' . showsPrec 1 ifelse . cpar n
    ExprBlock block -> opar n . showString "ExprBlock" . showChar ' ' . showsPrec 1 block . cpar n
    ExprArrayElems markexprlist -> opar n . showString "ExprArrayElems" . showChar ' ' . showsPrec 1 markexprlist . cpar n
    ExprArrayRepeat expr integer -> opar n . showString "ExprArrayRepeat" . showChar ' ' . showsPrec 1 expr . showChar ' ' . showsPrec 1 integer . cpar n
    ExprArrayRange integer0 integer1 -> opar n . showString "ExprArrayRange" . showChar ' ' . showsPrec 1 integer0 . showChar ' ' . showsPrec 1 integer1 . cpar n
    ExprTupleCons markexprlist -> opar n . showString "ExprTupleCons" . showChar ' ' . showsPrec 1 markexprlist . cpar n
    SepExprNil -> showString "SepExprNil"
    SepExprOne expr -> opar n . showString "SepExprOne" . showChar ' ' . showsPrec 1 expr . cpar n
    SepExprMore expr sepexprlist -> opar n . showString "SepExprMore" . showChar ' ' . showsPrec 1 expr . showChar ' ' . showsPrec 1 sepexprlist . cpar n
    SepExprHead expr -> opar n . showString "SepExprHead" . showChar ' ' . showsPrec 1 expr . cpar n
    SepExprTail sepexprlist expr -> opar n . showString "SepExprTail" . showChar ' ' . showsPrec 1 sepexprlist . showChar ' ' . showsPrec 1 expr . cpar n
    MarkENil -> showString "MarkENil"
    MarkEOne expr -> opar n . showString "MarkEOne" . showChar ' ' . showsPrec 1 expr . cpar n
    MarkEMore expr markexprlist -> opar n . showString "MarkEMore" . showChar ' ' . showsPrec 1 expr . showChar ' ' . showsPrec 1 markexprlist . cpar n
    MarkEHead expr -> opar n . showString "MarkEHead" . showChar ' ' . showsPrec 1 expr . cpar n
    MarkETail markexprlist expr -> opar n . showString "MarkETail" . showChar ' ' . showsPrec 1 markexprlist . showChar ' ' . showsPrec 1 expr . cpar n
    TypeBool -> showString "TypeBool"
    TypeI32 -> showString "TypeI32"
    TypeRef type' -> opar n . showString "TypeRef" . showChar ' ' . showsPrec 1 type' . cpar n
    TypeMutRef type' -> opar n . showString "TypeMutRef" . showChar ' ' . showsPrec 1 type' . cpar n
    TypeArray type' integer -> opar n . showString "TypeArray" . showChar ' ' . showsPrec 1 type' . showChar ' ' . showsPrec 1 integer . cpar n
    TypeTuple marktypelist -> opar n . showString "TypeTuple" . showChar ' ' . showsPrec 1 marktypelist . cpar n
    MarkTNil -> showString "MarkTNil"
    MarkTOne type' -> opar n . showString "MarkTOne" . showChar ' ' . showsPrec 1 type' . cpar n
    MarkTMore type' marktypelist -> opar n . showString "MarkTMore" . showChar ' ' . showsPrec 1 type' . showChar ' ' . showsPrec 1 marktypelist . cpar n
    MarkTHead type' -> opar n . showString "MarkTHead" . showChar ' ' . showsPrec 1 type' . cpar n
    MarkTTail marktypelist type' -> opar n . showString "MarkTTail" . showChar ' ' . showsPrec 1 marktypelist . showChar ' ' . showsPrec 1 type' . cpar n
    PatternIdent ident -> opar n . showString "PatternIdent" . showChar ' ' . showsPrec 1 ident . cpar n
    PatternIgnore -> showString "PatternIgnore"
    PatternTuple markletpatternlist -> opar n . showString "PatternTuple" . showChar ' ' . showsPrec 1 markletpatternlist . cpar n
    MarkPatternNil -> showString "MarkPatternNil"
    MarkPatternOne letpattern -> opar n . showString "MarkPatternOne" . showChar ' ' . showsPrec 1 letpattern . cpar n
    MarkPatternMore letpattern markletpatternlist -> opar n . showString "MarkPatternMore" . showChar ' ' . showsPrec 1 letpattern . showChar ' ' . showsPrec 1 markletpatternlist . cpar n
    MarkPatternHead letpattern -> opar n . showString "MarkPatternHead" . showChar ' ' . showsPrec 1 letpattern . cpar n
    MarkPatternTail markletpatternlist letpattern -> opar n . showString "MarkPatternTail" . showChar ' ' . showsPrec 1 markletpatternlist . showChar ' ' . showsPrec 1 letpattern . cpar n
    DeclLetType letpattern type' expr -> opar n . showString "DeclLetType" . showChar ' ' . showsPrec 1 letpattern . showChar ' ' . showsPrec 1 type' . showChar ' ' . showsPrec 1 expr . cpar n
    DeclLet letpattern expr -> opar n . showString "DeclLet" . showChar ' ' . showsPrec 1 letpattern . showChar ' ' . showsPrec 1 expr . cpar n
    FunDecl ident sepparameterlist block -> opar n . showString "FunDecl" . showChar ' ' . showsPrec 1 ident . showChar ' ' . showsPrec 1 sepparameterlist . showChar ' ' . showsPrec 1 block . cpar n
    FunDeclType ident sepparameterlist type' block -> opar n . showString "FunDeclType" . showChar ' ' . showsPrec 1 ident . showChar ' ' . showsPrec 1 sepparameterlist . showChar ' ' . showsPrec 1 type' . showChar ' ' . showsPrec 1 block . cpar n
    Parameter ident type' -> opar n . showString "Parameter" . showChar ' ' . showsPrec 1 ident . showChar ' ' . showsPrec 1 type' . cpar n
    SepPNil -> showString "SepPNil"
    SepPOne parameter -> opar n . showString "SepPOne" . showChar ' ' . showsPrec 1 parameter . cpar n
    SepPMore parameter sepparameterlist -> opar n . showString "SepPMore" . showChar ' ' . showsPrec 1 parameter . showChar ' ' . showsPrec 1 sepparameterlist . cpar n
    SepPHead parameter -> opar n . showString "SepPHead" . showChar ' ' . showsPrec 1 parameter . cpar n
    SepPTail sepparameterlist parameter -> opar n . showString "SepPTail" . showChar ' ' . showsPrec 1 sepparameterlist . showChar ' ' . showsPrec 1 parameter . cpar n
    IfElse expr block0 block1 -> opar n . showString "IfElse" . showChar ' ' . showsPrec 1 expr . showChar ' ' . showsPrec 1 block0 . showChar ' ' . showsPrec 1 block1 . cpar n
    IfStmt expr block -> opar n . showString "IfStmt" . showChar ' ' . showsPrec 1 expr . showChar ' ' . showsPrec 1 block . cpar n
    LoopInf block -> opar n . showString "LoopInf" . showChar ' ' . showsPrec 1 block . cpar n
    LoopWhile expr block -> opar n . showString "LoopWhile" . showChar ' ' . showsPrec 1 expr . showChar ' ' . showsPrec 1 block . cpar n
    LoopForIterable ident expr block -> opar n . showString "LoopForIterable" . showChar ' ' . showsPrec 1 ident . showChar ' ' . showsPrec 1 expr . showChar ' ' . showsPrec 1 block . cpar n
    LoopForRange ident expr0 expr1 block2 -> opar n . showString "LoopForRange" . showChar ' ' . showsPrec 1 ident . showChar ' ' . showsPrec 1 expr0 . showChar ' ' . showsPrec 1 expr1 . showChar ' ' . showsPrec 1 block2 . cpar n
    StmtLet letdecl -> opar n . showString "StmtLet" . showChar ' ' . showsPrec 1 letdecl . cpar n
    StmtFnDecl fundecl -> opar n . showString "StmtFnDecl" . showChar ' ' . showsPrec 1 fundecl . cpar n
    StmtExpr expr -> opar n . showString "StmtExpr" . showChar ' ' . showsPrec 1 expr . cpar n
    StmtBreak -> showString "StmtBreak"
    StmtContinue -> showString "StmtContinue"
    StmtIf ifstmt -> opar n . showString "StmtIf" . showChar ' ' . showsPrec 1 ifstmt . cpar n
    StmtIfElse ifelse -> opar n . showString "StmtIfElse" . showChar ' ' . showsPrec 1 ifelse . cpar n
    StmtLoop loop -> opar n . showString "StmtLoop" . showChar ' ' . showsPrec 1 loop . cpar n
    BlockStmt stmts -> opar n . showString "BlockStmt" . showChar ' ' . showsPrec 1 stmts . cpar n
    BlockExpr stmts expr -> opar n . showString "BlockExpr" . showChar ' ' . showsPrec 1 stmts . showChar ' ' . showsPrec 1 expr . cpar n
    Program fundecls -> opar n . showString "Program" . showChar ' ' . showsPrec 1 fundecls . cpar n
    Ident str -> opar n . showString "Ident" . showChar ' ' . showsPrec 1 str . cpar n
    Boolean str -> opar n . showString "Boolean" . showChar ' ' . showsPrec 1 str . cpar n
   where opar n = if n > 0 then showChar '(' else id
         cpar n = if n > 0 then showChar ')' else id

instance Eq (Tree c) where (==) = johnMajorEq

johnMajorEq :: Tree a -> Tree b -> Bool
johnMajorEq (LiteralBool boolean) (LiteralBool boolean_) = boolean == boolean_
johnMajorEq (LiteralI32 integer) (LiteralI32 integer_) = integer == integer_
johnMajorEq (ExprAssign expr0 expr1) (ExprAssign expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprOr expr0 expr1) (ExprOr expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprAnd expr0 expr1) (ExprAnd expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprEq expr0 expr1) (ExprEq expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprNotEq expr0 expr1) (ExprNotEq expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprLess expr0 expr1) (ExprLess expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprAdd expr0 expr1) (ExprAdd expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprSub expr0 expr1) (ExprSub expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprMul expr0 expr1) (ExprMul expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprDiv expr0 expr1) (ExprDiv expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprMod expr0 expr1) (ExprMod expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprNeg expr) (ExprNeg expr_) = expr == expr_
johnMajorEq (ExprDeref expr) (ExprDeref expr_) = expr == expr_
johnMajorEq (ExprNot expr) (ExprNot expr_) = expr == expr_
johnMajorEq (ExprRef expr) (ExprRef expr_) = expr == expr_
johnMajorEq (ExprMutRef expr) (ExprMutRef expr_) = expr == expr_
johnMajorEq (ExprLiteral literal) (ExprLiteral literal_) = literal == literal_
johnMajorEq (ExprIdent ident) (ExprIdent ident_) = ident == ident_
johnMajorEq (ExprCall ident sepexprlist) (ExprCall ident_ sepexprlist_) = ident == ident_ && sepexprlist == sepexprlist_
johnMajorEq (ExprArrayLookup expr0 expr1) (ExprArrayLookup expr0_ expr1_) = expr0 == expr0_ && expr1 == expr1_
johnMajorEq (ExprTupleLookup expr integer) (ExprTupleLookup expr_ integer_) = expr == expr_ && integer == integer_
johnMajorEq (ExprIfElse ifelse) (ExprIfElse ifelse_) = ifelse == ifelse_
johnMajorEq (ExprBlock block) (ExprBlock block_) = block == block_
johnMajorEq (ExprArrayElems markexprlist) (ExprArrayElems markexprlist_) = markexprlist == markexprlist_
johnMajorEq (ExprArrayRepeat expr integer) (ExprArrayRepeat expr_ integer_) = expr == expr_ && integer == integer_
johnMajorEq (ExprArrayRange integer0 integer1) (ExprArrayRange integer0_ integer1_) = integer0 == integer0_ && integer1 == integer1_
johnMajorEq (ExprTupleCons markexprlist) (ExprTupleCons markexprlist_) = markexprlist == markexprlist_
johnMajorEq SepExprNil SepExprNil = True
johnMajorEq (SepExprOne expr) (SepExprOne expr_) = expr == expr_
johnMajorEq (SepExprMore expr sepexprlist) (SepExprMore expr_ sepexprlist_) = expr == expr_ && sepexprlist == sepexprlist_
johnMajorEq (SepExprHead expr) (SepExprHead expr_) = expr == expr_
johnMajorEq (SepExprTail sepexprlist expr) (SepExprTail sepexprlist_ expr_) = sepexprlist == sepexprlist_ && expr == expr_
johnMajorEq MarkENil MarkENil = True
johnMajorEq (MarkEOne expr) (MarkEOne expr_) = expr == expr_
johnMajorEq (MarkEMore expr markexprlist) (MarkEMore expr_ markexprlist_) = expr == expr_ && markexprlist == markexprlist_
johnMajorEq (MarkEHead expr) (MarkEHead expr_) = expr == expr_
johnMajorEq (MarkETail markexprlist expr) (MarkETail markexprlist_ expr_) = markexprlist == markexprlist_ && expr == expr_
johnMajorEq TypeBool TypeBool = True
johnMajorEq TypeI32 TypeI32 = True
johnMajorEq (TypeRef type') (TypeRef type'_) = type' == type'_
johnMajorEq (TypeMutRef type') (TypeMutRef type'_) = type' == type'_
johnMajorEq (TypeArray type' integer) (TypeArray type'_ integer_) = type' == type'_ && integer == integer_
johnMajorEq (TypeTuple marktypelist) (TypeTuple marktypelist_) = marktypelist == marktypelist_
johnMajorEq MarkTNil MarkTNil = True
johnMajorEq (MarkTOne type') (MarkTOne type'_) = type' == type'_
johnMajorEq (MarkTMore type' marktypelist) (MarkTMore type'_ marktypelist_) = type' == type'_ && marktypelist == marktypelist_
johnMajorEq (MarkTHead type') (MarkTHead type'_) = type' == type'_
johnMajorEq (MarkTTail marktypelist type') (MarkTTail marktypelist_ type'_) = marktypelist == marktypelist_ && type' == type'_
johnMajorEq (PatternIdent ident) (PatternIdent ident_) = ident == ident_
johnMajorEq PatternIgnore PatternIgnore = True
johnMajorEq (PatternTuple markletpatternlist) (PatternTuple markletpatternlist_) = markletpatternlist == markletpatternlist_
johnMajorEq MarkPatternNil MarkPatternNil = True
johnMajorEq (MarkPatternOne letpattern) (MarkPatternOne letpattern_) = letpattern == letpattern_
johnMajorEq (MarkPatternMore letpattern markletpatternlist) (MarkPatternMore letpattern_ markletpatternlist_) = letpattern == letpattern_ && markletpatternlist == markletpatternlist_
johnMajorEq (MarkPatternHead letpattern) (MarkPatternHead letpattern_) = letpattern == letpattern_
johnMajorEq (MarkPatternTail markletpatternlist letpattern) (MarkPatternTail markletpatternlist_ letpattern_) = markletpatternlist == markletpatternlist_ && letpattern == letpattern_
johnMajorEq (DeclLetType letpattern type' expr) (DeclLetType letpattern_ type'_ expr_) = letpattern == letpattern_ && type' == type'_ && expr == expr_
johnMajorEq (DeclLet letpattern expr) (DeclLet letpattern_ expr_) = letpattern == letpattern_ && expr == expr_
johnMajorEq (FunDecl ident sepparameterlist block) (FunDecl ident_ sepparameterlist_ block_) = ident == ident_ && sepparameterlist == sepparameterlist_ && block == block_
johnMajorEq (FunDeclType ident sepparameterlist type' block) (FunDeclType ident_ sepparameterlist_ type'_ block_) = ident == ident_ && sepparameterlist == sepparameterlist_ && type' == type'_ && block == block_
johnMajorEq (Parameter ident type') (Parameter ident_ type'_) = ident == ident_ && type' == type'_
johnMajorEq SepPNil SepPNil = True
johnMajorEq (SepPOne parameter) (SepPOne parameter_) = parameter == parameter_
johnMajorEq (SepPMore parameter sepparameterlist) (SepPMore parameter_ sepparameterlist_) = parameter == parameter_ && sepparameterlist == sepparameterlist_
johnMajorEq (SepPHead parameter) (SepPHead parameter_) = parameter == parameter_
johnMajorEq (SepPTail sepparameterlist parameter) (SepPTail sepparameterlist_ parameter_) = sepparameterlist == sepparameterlist_ && parameter == parameter_
johnMajorEq (IfElse expr block0 block1) (IfElse expr_ block0_ block1_) = expr == expr_ && block0 == block0_ && block1 == block1_
johnMajorEq (IfStmt expr block) (IfStmt expr_ block_) = expr == expr_ && block == block_
johnMajorEq (LoopInf block) (LoopInf block_) = block == block_
johnMajorEq (LoopWhile expr block) (LoopWhile expr_ block_) = expr == expr_ && block == block_
johnMajorEq (LoopForIterable ident expr block) (LoopForIterable ident_ expr_ block_) = ident == ident_ && expr == expr_ && block == block_
johnMajorEq (LoopForRange ident expr0 expr1 block2) (LoopForRange ident_ expr0_ expr1_ block2_) = ident == ident_ && expr0 == expr0_ && expr1 == expr1_ && block2 == block2_
johnMajorEq (StmtLet letdecl) (StmtLet letdecl_) = letdecl == letdecl_
johnMajorEq (StmtFnDecl fundecl) (StmtFnDecl fundecl_) = fundecl == fundecl_
johnMajorEq (StmtExpr expr) (StmtExpr expr_) = expr == expr_
johnMajorEq StmtBreak StmtBreak = True
johnMajorEq StmtContinue StmtContinue = True
johnMajorEq (StmtIf ifstmt) (StmtIf ifstmt_) = ifstmt == ifstmt_
johnMajorEq (StmtIfElse ifelse) (StmtIfElse ifelse_) = ifelse == ifelse_
johnMajorEq (StmtLoop loop) (StmtLoop loop_) = loop == loop_
johnMajorEq (BlockStmt stmts) (BlockStmt stmts_) = stmts == stmts_
johnMajorEq (BlockExpr stmts expr) (BlockExpr stmts_ expr_) = stmts == stmts_ && expr == expr_
johnMajorEq (Program fundecls) (Program fundecls_) = fundecls == fundecls_
johnMajorEq (Ident str) (Ident str_) = str == str_
johnMajorEq (Boolean str) (Boolean str_) = str == str_
johnMajorEq _ _ = False

instance Ord (Tree c) where
  compare x y = compare (index x) (index y) `mappend` compareSame x y
index :: Tree c -> Int
index (LiteralBool _) = 0
index (LiteralI32 _) = 1
index (ExprAssign _ _) = 2
index (ExprOr _ _) = 3
index (ExprAnd _ _) = 4
index (ExprEq _ _) = 5
index (ExprNotEq _ _) = 6
index (ExprLess _ _) = 7
index (ExprAdd _ _) = 8
index (ExprSub _ _) = 9
index (ExprMul _ _) = 10
index (ExprDiv _ _) = 11
index (ExprMod _ _) = 12
index (ExprNeg _) = 13
index (ExprDeref _) = 14
index (ExprNot _) = 15
index (ExprRef _) = 16
index (ExprMutRef _) = 17
index (ExprLiteral _) = 18
index (ExprIdent _) = 19
index (ExprCall _ _) = 20
index (ExprArrayLookup _ _) = 21
index (ExprTupleLookup _ _) = 22
index (ExprIfElse _) = 23
index (ExprBlock _) = 24
index (ExprArrayElems _) = 25
index (ExprArrayRepeat _ _) = 26
index (ExprArrayRange _ _) = 27
index (ExprTupleCons _) = 28
index (SepExprNil ) = 29
index (SepExprOne _) = 30
index (SepExprMore _ _) = 31
index (SepExprHead _) = 32
index (SepExprTail _ _) = 33
index (MarkENil ) = 34
index (MarkEOne _) = 35
index (MarkEMore _ _) = 36
index (MarkEHead _) = 37
index (MarkETail _ _) = 38
index (TypeBool ) = 39
index (TypeI32 ) = 40
index (TypeRef _) = 41
index (TypeMutRef _) = 42
index (TypeArray _ _) = 43
index (TypeTuple _) = 44
index (MarkTNil ) = 45
index (MarkTOne _) = 46
index (MarkTMore _ _) = 47
index (MarkTHead _) = 48
index (MarkTTail _ _) = 49
index (PatternIdent _) = 50
index (PatternIgnore ) = 51
index (PatternTuple _) = 52
index (MarkPatternNil ) = 53
index (MarkPatternOne _) = 54
index (MarkPatternMore _ _) = 55
index (MarkPatternHead _) = 56
index (MarkPatternTail _ _) = 57
index (DeclLetType _ _ _) = 58
index (DeclLet _ _) = 59
index (FunDecl _ _ _) = 60
index (FunDeclType _ _ _ _) = 61
index (Parameter _ _) = 62
index (SepPNil ) = 63
index (SepPOne _) = 64
index (SepPMore _ _) = 65
index (SepPHead _) = 66
index (SepPTail _ _) = 67
index (IfElse _ _ _) = 68
index (IfStmt _ _) = 69
index (LoopInf _) = 70
index (LoopWhile _ _) = 71
index (LoopForIterable _ _ _) = 72
index (LoopForRange _ _ _ _) = 73
index (StmtLet _) = 74
index (StmtFnDecl _) = 75
index (StmtExpr _) = 76
index (StmtBreak ) = 77
index (StmtContinue ) = 78
index (StmtIf _) = 79
index (StmtIfElse _) = 80
index (StmtLoop _) = 81
index (BlockStmt _) = 82
index (BlockExpr _ _) = 83
index (Program _) = 84
index (Ident _) = 85
index (Boolean _) = 86
compareSame :: Tree c -> Tree c -> Ordering
compareSame (LiteralBool boolean) (LiteralBool boolean_) = compare boolean boolean_
compareSame (LiteralI32 integer) (LiteralI32 integer_) = compare integer integer_
compareSame (ExprAssign expr0 expr1) (ExprAssign expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprOr expr0 expr1) (ExprOr expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprAnd expr0 expr1) (ExprAnd expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprEq expr0 expr1) (ExprEq expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprNotEq expr0 expr1) (ExprNotEq expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprLess expr0 expr1) (ExprLess expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprAdd expr0 expr1) (ExprAdd expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprSub expr0 expr1) (ExprSub expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprMul expr0 expr1) (ExprMul expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprDiv expr0 expr1) (ExprDiv expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprMod expr0 expr1) (ExprMod expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprNeg expr) (ExprNeg expr_) = compare expr expr_
compareSame (ExprDeref expr) (ExprDeref expr_) = compare expr expr_
compareSame (ExprNot expr) (ExprNot expr_) = compare expr expr_
compareSame (ExprRef expr) (ExprRef expr_) = compare expr expr_
compareSame (ExprMutRef expr) (ExprMutRef expr_) = compare expr expr_
compareSame (ExprLiteral literal) (ExprLiteral literal_) = compare literal literal_
compareSame (ExprIdent ident) (ExprIdent ident_) = compare ident ident_
compareSame (ExprCall ident sepexprlist) (ExprCall ident_ sepexprlist_) = mappend (compare ident ident_) (compare sepexprlist sepexprlist_)
compareSame (ExprArrayLookup expr0 expr1) (ExprArrayLookup expr0_ expr1_) = mappend (compare expr0 expr0_) (compare expr1 expr1_)
compareSame (ExprTupleLookup expr integer) (ExprTupleLookup expr_ integer_) = mappend (compare expr expr_) (compare integer integer_)
compareSame (ExprIfElse ifelse) (ExprIfElse ifelse_) = compare ifelse ifelse_
compareSame (ExprBlock block) (ExprBlock block_) = compare block block_
compareSame (ExprArrayElems markexprlist) (ExprArrayElems markexprlist_) = compare markexprlist markexprlist_
compareSame (ExprArrayRepeat expr integer) (ExprArrayRepeat expr_ integer_) = mappend (compare expr expr_) (compare integer integer_)
compareSame (ExprArrayRange integer0 integer1) (ExprArrayRange integer0_ integer1_) = mappend (compare integer0 integer0_) (compare integer1 integer1_)
compareSame (ExprTupleCons markexprlist) (ExprTupleCons markexprlist_) = compare markexprlist markexprlist_
compareSame SepExprNil SepExprNil = EQ
compareSame (SepExprOne expr) (SepExprOne expr_) = compare expr expr_
compareSame (SepExprMore expr sepexprlist) (SepExprMore expr_ sepexprlist_) = mappend (compare expr expr_) (compare sepexprlist sepexprlist_)
compareSame (SepExprHead expr) (SepExprHead expr_) = compare expr expr_
compareSame (SepExprTail sepexprlist expr) (SepExprTail sepexprlist_ expr_) = mappend (compare sepexprlist sepexprlist_) (compare expr expr_)
compareSame MarkENil MarkENil = EQ
compareSame (MarkEOne expr) (MarkEOne expr_) = compare expr expr_
compareSame (MarkEMore expr markexprlist) (MarkEMore expr_ markexprlist_) = mappend (compare expr expr_) (compare markexprlist markexprlist_)
compareSame (MarkEHead expr) (MarkEHead expr_) = compare expr expr_
compareSame (MarkETail markexprlist expr) (MarkETail markexprlist_ expr_) = mappend (compare markexprlist markexprlist_) (compare expr expr_)
compareSame TypeBool TypeBool = EQ
compareSame TypeI32 TypeI32 = EQ
compareSame (TypeRef type') (TypeRef type'_) = compare type' type'_
compareSame (TypeMutRef type') (TypeMutRef type'_) = compare type' type'_
compareSame (TypeArray type' integer) (TypeArray type'_ integer_) = mappend (compare type' type'_) (compare integer integer_)
compareSame (TypeTuple marktypelist) (TypeTuple marktypelist_) = compare marktypelist marktypelist_
compareSame MarkTNil MarkTNil = EQ
compareSame (MarkTOne type') (MarkTOne type'_) = compare type' type'_
compareSame (MarkTMore type' marktypelist) (MarkTMore type'_ marktypelist_) = mappend (compare type' type'_) (compare marktypelist marktypelist_)
compareSame (MarkTHead type') (MarkTHead type'_) = compare type' type'_
compareSame (MarkTTail marktypelist type') (MarkTTail marktypelist_ type'_) = mappend (compare marktypelist marktypelist_) (compare type' type'_)
compareSame (PatternIdent ident) (PatternIdent ident_) = compare ident ident_
compareSame PatternIgnore PatternIgnore = EQ
compareSame (PatternTuple markletpatternlist) (PatternTuple markletpatternlist_) = compare markletpatternlist markletpatternlist_
compareSame MarkPatternNil MarkPatternNil = EQ
compareSame (MarkPatternOne letpattern) (MarkPatternOne letpattern_) = compare letpattern letpattern_
compareSame (MarkPatternMore letpattern markletpatternlist) (MarkPatternMore letpattern_ markletpatternlist_) = mappend (compare letpattern letpattern_) (compare markletpatternlist markletpatternlist_)
compareSame (MarkPatternHead letpattern) (MarkPatternHead letpattern_) = compare letpattern letpattern_
compareSame (MarkPatternTail markletpatternlist letpattern) (MarkPatternTail markletpatternlist_ letpattern_) = mappend (compare markletpatternlist markletpatternlist_) (compare letpattern letpattern_)
compareSame (DeclLetType letpattern type' expr) (DeclLetType letpattern_ type'_ expr_) = mappend (compare letpattern letpattern_) (mappend (compare type' type'_) (compare expr expr_))
compareSame (DeclLet letpattern expr) (DeclLet letpattern_ expr_) = mappend (compare letpattern letpattern_) (compare expr expr_)
compareSame (FunDecl ident sepparameterlist block) (FunDecl ident_ sepparameterlist_ block_) = mappend (compare ident ident_) (mappend (compare sepparameterlist sepparameterlist_) (compare block block_))
compareSame (FunDeclType ident sepparameterlist type' block) (FunDeclType ident_ sepparameterlist_ type'_ block_) = mappend (compare ident ident_) (mappend (compare sepparameterlist sepparameterlist_) (mappend (compare type' type'_) (compare block block_)))
compareSame (Parameter ident type') (Parameter ident_ type'_) = mappend (compare ident ident_) (compare type' type'_)
compareSame SepPNil SepPNil = EQ
compareSame (SepPOne parameter) (SepPOne parameter_) = compare parameter parameter_
compareSame (SepPMore parameter sepparameterlist) (SepPMore parameter_ sepparameterlist_) = mappend (compare parameter parameter_) (compare sepparameterlist sepparameterlist_)
compareSame (SepPHead parameter) (SepPHead parameter_) = compare parameter parameter_
compareSame (SepPTail sepparameterlist parameter) (SepPTail sepparameterlist_ parameter_) = mappend (compare sepparameterlist sepparameterlist_) (compare parameter parameter_)
compareSame (IfElse expr block0 block1) (IfElse expr_ block0_ block1_) = mappend (compare expr expr_) (mappend (compare block0 block0_) (compare block1 block1_))
compareSame (IfStmt expr block) (IfStmt expr_ block_) = mappend (compare expr expr_) (compare block block_)
compareSame (LoopInf block) (LoopInf block_) = compare block block_
compareSame (LoopWhile expr block) (LoopWhile expr_ block_) = mappend (compare expr expr_) (compare block block_)
compareSame (LoopForIterable ident expr block) (LoopForIterable ident_ expr_ block_) = mappend (compare ident ident_) (mappend (compare expr expr_) (compare block block_))
compareSame (LoopForRange ident expr0 expr1 block2) (LoopForRange ident_ expr0_ expr1_ block2_) = mappend (compare ident ident_) (mappend (compare expr0 expr0_) (mappend (compare expr1 expr1_) (compare block2 block2_)))
compareSame (StmtLet letdecl) (StmtLet letdecl_) = compare letdecl letdecl_
compareSame (StmtFnDecl fundecl) (StmtFnDecl fundecl_) = compare fundecl fundecl_
compareSame (StmtExpr expr) (StmtExpr expr_) = compare expr expr_
compareSame StmtBreak StmtBreak = EQ
compareSame StmtContinue StmtContinue = EQ
compareSame (StmtIf ifstmt) (StmtIf ifstmt_) = compare ifstmt ifstmt_
compareSame (StmtIfElse ifelse) (StmtIfElse ifelse_) = compare ifelse ifelse_
compareSame (StmtLoop loop) (StmtLoop loop_) = compare loop loop_
compareSame (BlockStmt stmts) (BlockStmt stmts_) = compare stmts stmts_
compareSame (BlockExpr stmts expr) (BlockExpr stmts_ expr_) = mappend (compare stmts stmts_) (compare expr expr_)
compareSame (Program fundecls) (Program fundecls_) = compare fundecls fundecls_
compareSame (Ident str) (Ident str_) = compare str str_
compareSame (Boolean str) (Boolean str_) = compare str str_
compareSame x y = error "BNFC error:" compareSame
