{-# LANGUAGE GADTs #-}
module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transTree :: Tree c -> Result
transTree t = case t of
  LiteralBool boolean -> failure t
  LiteralI32 integer -> failure t
  ExprAssign expr0 expr1 -> failure t
  ExprOr expr0 expr1 -> failure t
  ExprAnd expr0 expr1 -> failure t
  ExprEq expr0 expr1 -> failure t
  ExprNotEq expr0 expr1 -> failure t
  ExprLess expr0 expr1 -> failure t
  ExprAdd expr0 expr1 -> failure t
  ExprSub expr0 expr1 -> failure t
  ExprMul expr0 expr1 -> failure t
  ExprDiv expr0 expr1 -> failure t
  ExprMod expr0 expr1 -> failure t
  ExprNeg expr -> failure t
  ExprDeref expr -> failure t
  ExprNot expr -> failure t
  ExprBorrow expr -> failure t
  ExprMutBorrow expr -> failure t
  ExprLiteral literal -> failure t
  ExprIdent ident -> failure t
  ExprCall ident sepexprlist -> failure t
  ExprArrayLookup expr0 expr1 -> failure t
  ExprTupleLookup expr integer -> failure t
  ExprIfElse ifelse -> failure t
  ExprBlock block -> failure t
  ExprArrayElems markexprlist -> failure t
  ExprArrayRepeat expr integer -> failure t
  ExprArrayRange integer0 integer1 -> failure t
  ExprTuple markexprlist -> failure t
  SepExprNil  -> failure t
  SepExprOne expr -> failure t
  SepExprMore expr sepexprlist -> failure t
  SepExprHead expr -> failure t
  SepExprTail sepexprlist expr -> failure t
  MarkExprNil  -> failure t
  MarkExprOne expr -> failure t
  MarkExprMore expr markexprlist -> failure t
  MarkExprHead expr -> failure t
  MarkExprTail markexprlist expr -> failure t
  TypeBool  -> failure t
  TypeI32  -> failure t
  TypeRef type' -> failure t
  TypeMutRef type' -> failure t
  TypeArray type' integer -> failure t
  TypeTuple marktypelist -> failure t
  MarkTNil  -> failure t
  MarkTOne type' -> failure t
  MarkTMore type' marktypelist -> failure t
  MarkTHead type' -> failure t
  MarkTTail marktypelist type' -> failure t
  PatternIdent ident -> failure t
  PatternMutIdent ident -> failure t
  PatternIgnore  -> failure t
  PatternTuple markletpatternlist -> failure t
  MarkPatternNil  -> failure t
  MarkPatternOne letpattern -> failure t
  MarkPatternMore letpattern markletpatternlist -> failure t
  MarkPatternHead letpattern -> failure t
  MarkPatternTail markletpatternlist letpattern -> failure t
  FunDecl ident sepparameterlist block -> failure t
  FunDeclType ident sepparameterlist type' block -> failure t
  Parameter ident type' -> failure t
  SepPNil  -> failure t
  SepPOne parameter -> failure t
  SepPMore parameter sepparameterlist -> failure t
  SepPHead parameter -> failure t
  SepPTail sepparameterlist parameter -> failure t
  IfElse expr block0 block1 -> failure t
  IfStmt expr block -> failure t
  StmtFnDecl fundecl -> failure t
  StmtExpr expr -> failure t
  StmtBreak  -> failure t
  StmtContinue  -> failure t
  StmtIf ifstmt -> failure t
  StmtIfElse ifelse -> failure t
  StmtLoop block -> failure t
  StmtWhile expr block -> failure t
  StmtForIterable ident expr block -> failure t
  StmtForRange ident expr0 expr1 block2 -> failure t
  StmtLetType letpattern type' expr -> failure t
  StmtLet letpattern expr -> failure t
  BlockStmt stmts -> failure t
  BlockExpr stmts expr -> failure t
  Program fundecls -> failure t
  Ident str -> failure t
  Boolean str -> failure t

transLiteral :: Literal -> Result
transLiteral t = case t of
  LiteralBool boolean -> failure t
  LiteralI32 integer -> failure t

transExpr :: Expr -> Result
transExpr t = case t of
  ExprAssign expr0 expr1 -> failure t
  ExprOr expr0 expr1 -> failure t
  ExprAnd expr0 expr1 -> failure t
  ExprEq expr0 expr1 -> failure t
  ExprNotEq expr0 expr1 -> failure t
  ExprLess expr0 expr1 -> failure t
  ExprAdd expr0 expr1 -> failure t
  ExprSub expr0 expr1 -> failure t
  ExprMul expr0 expr1 -> failure t
  ExprDiv expr0 expr1 -> failure t
  ExprMod expr0 expr1 -> failure t
  ExprNeg expr -> failure t
  ExprDeref expr -> failure t
  ExprNot expr -> failure t
  ExprBorrow expr -> failure t
  ExprMutBorrow expr -> failure t
  ExprLiteral literal -> failure t
  ExprIdent ident -> failure t
  ExprCall ident sepexprlist -> failure t
  ExprArrayLookup expr0 expr1 -> failure t
  ExprTupleLookup expr integer -> failure t
  ExprIfElse ifelse -> failure t
  ExprBlock block -> failure t
  ExprArrayElems markexprlist -> failure t
  ExprArrayRepeat expr integer -> failure t
  ExprArrayRange integer0 integer1 -> failure t
  ExprTuple markexprlist -> failure t

transSepExprList :: SepExprList -> Result
transSepExprList t = case t of
  SepExprNil  -> failure t
  SepExprOne expr -> failure t
  SepExprMore expr sepexprlist -> failure t
  SepExprHead expr -> failure t
  SepExprTail sepexprlist expr -> failure t

transMarkExprList :: MarkExprList -> Result
transMarkExprList t = case t of
  MarkExprNil  -> failure t
  MarkExprOne expr -> failure t
  MarkExprMore expr markexprlist -> failure t
  MarkExprHead expr -> failure t
  MarkExprTail markexprlist expr -> failure t

transType :: Type -> Result
transType t = case t of
  TypeBool  -> failure t
  TypeI32  -> failure t
  TypeRef type' -> failure t
  TypeMutRef type' -> failure t
  TypeArray type' integer -> failure t
  TypeTuple marktypelist -> failure t

transMarkTypeList :: MarkTypeList -> Result
transMarkTypeList t = case t of
  MarkTNil  -> failure t
  MarkTOne type' -> failure t
  MarkTMore type' marktypelist -> failure t
  MarkTHead type' -> failure t
  MarkTTail marktypelist type' -> failure t

transLetPattern :: LetPattern -> Result
transLetPattern t = case t of
  PatternIdent ident -> failure t
  PatternMutIdent ident -> failure t
  PatternIgnore  -> failure t
  PatternTuple markletpatternlist -> failure t

transMarkLetPatternList :: MarkLetPatternList -> Result
transMarkLetPatternList t = case t of
  MarkPatternNil  -> failure t
  MarkPatternOne letpattern -> failure t
  MarkPatternMore letpattern markletpatternlist -> failure t
  MarkPatternHead letpattern -> failure t
  MarkPatternTail markletpatternlist letpattern -> failure t

transFunDecl :: FunDecl -> Result
transFunDecl t = case t of
  FunDecl ident sepparameterlist block -> failure t
  FunDeclType ident sepparameterlist type' block -> failure t

transParameter :: Parameter -> Result
transParameter t = case t of
  Parameter ident type' -> failure t

transSepParameterList :: SepParameterList -> Result
transSepParameterList t = case t of
  SepPNil  -> failure t
  SepPOne parameter -> failure t
  SepPMore parameter sepparameterlist -> failure t
  SepPHead parameter -> failure t
  SepPTail sepparameterlist parameter -> failure t

transIfElse :: IfElse -> Result
transIfElse t = case t of
  IfElse expr block0 block1 -> failure t

transIfStmt :: IfStmt -> Result
transIfStmt t = case t of
  IfStmt expr block -> failure t

transStmt :: Stmt -> Result
transStmt t = case t of
  StmtFnDecl fundecl -> failure t
  StmtExpr expr -> failure t
  StmtBreak  -> failure t
  StmtContinue  -> failure t
  StmtIf ifstmt -> failure t
  StmtIfElse ifelse -> failure t
  StmtLoop block -> failure t
  StmtWhile expr block -> failure t
  StmtForIterable ident expr block -> failure t
  StmtForRange ident expr0 expr1 block2 -> failure t
  StmtLetType letpattern type' expr -> failure t
  StmtLet letpattern expr -> failure t

transBlock :: Block -> Result
transBlock t = case t of
  BlockStmt stmts -> failure t
  BlockExpr stmts expr -> failure t

transProgram :: Program -> Result
transProgram t = case t of
  Program fundecls -> failure t

transIdent :: Ident -> Result
transIdent t = case t of
  Ident str -> failure t

transBoolean :: Boolean -> Result
transBoolean t = case t of
  Boolean str -> failure t

