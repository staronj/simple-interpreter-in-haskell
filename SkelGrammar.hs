{-# LANGUAGE GADTs #-}
module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transTree :: Tree c -> Result
transTree t = case t of
  LiteralBool boolean -> failure t
  LiteralI32 integer -> failure t
  LiteralIdent ident -> failure t
  Assign expr0 expr1 -> failure t
  Or expr0 expr1 -> failure t
  And expr0 expr1 -> failure t
  Equal expr0 expr1 -> failure t
  NotEqual expr0 expr1 -> failure t
  Less expr0 expr1 -> failure t
  Add expr0 expr1 -> failure t
  Subtract expr0 expr1 -> failure t
  Multiply expr0 expr1 -> failure t
  Divide expr0 expr1 -> failure t
  Modulo expr0 expr1 -> failure t
  Negate expr -> failure t
  Dereference expr -> failure t
  Not expr -> failure t
  Borrow expr -> failure t
  MutableBorrow expr -> failure t
  LiteralExpr literal -> failure t
  ExprIdent ident -> failure t
  FunctionCall ident sepexprlist -> failure t
  ArrayLookup expr0 expr1 -> failure t
  TupleLookup expr integer -> failure t
  IfElseExpr ifelse -> failure t
  BlockExpr block -> failure t
  ArrayElements markexprlist -> failure t
  ArrayRepeat expr integer -> failure t
  ArrayRange integer0 integer1 -> failure t
  TupleConstruct markexprlist -> failure t
  SepExprNil  -> failure t
  SepExprOne expr -> failure t
  SepExprMore expr sepexprlist -> failure t
  SepExprHead expr -> failure t
  SepExprTail sepexprlist expr -> failure t
  MarkExprNil  -> failure t
  MarkExprOne expr -> failure t
  MarkExprMore expr markexprlist -> failure t
  MarkExprHead expr -> failure t
  MarkExprTail markexprlist expr -> failure t
  Bool  -> failure t
  I32  -> failure t
  Reference type' -> failure t
  MutableReference type' -> failure t
  Array type' integer -> failure t
  Tuple marktypelist -> failure t
  MarkTNil  -> failure t
  MarkTOne type' -> failure t
  MarkTMore type' marktypelist -> failure t
  MarkTHead type' -> failure t
  MarkTTail marktypelist type' -> failure t
  PatternVariable ident -> failure t
  PatternMutableVariable ident -> failure t
  PatternIgnore  -> failure t
  PatternTuple markpatternlist -> failure t
  MarkPatternNil  -> failure t
  MarkPatternOne pattern -> failure t
  MarkPatternMore pattern markpatternlist -> failure t
  MarkPatternHead pattern -> failure t
  MarkPatternTail markpatternlist pattern -> failure t
  FunDecl ident sepparameterlist block -> failure t
  FunDeclType ident sepparameterlist type' block -> failure t
  Parameter ident type' -> failure t
  SepPNil  -> failure t
  SepPOne parameter -> failure t
  SepPMore parameter sepparameterlist -> failure t
  SepPHead parameter -> failure t
  SepPTail sepparameterlist parameter -> failure t
  IfElse expr block0 block1 -> failure t
  IfStmt expr block -> failure t
  FunDeclStmt fundecl -> failure t
  Stmt expr -> failure t
  Break  -> failure t
  Continue  -> failure t
  If ifstmt -> failure t
  IfElseStmt ifelse -> failure t
  Loop block -> failure t
  While expr block -> failure t
  IterableForLoop ident expr block -> failure t
  RangeForLoop ident expr0 expr1 block2 -> failure t
  LetStmtStrict pattern type' expr -> failure t
  LetStmt pattern expr -> failure t
  BlockStmt block -> failure t
  Block stmts -> failure t
  BlockWithValue stmts expr -> failure t
  Program fundecls -> failure t
  Ident str -> failure t
  Boolean str -> failure t

transLiteral :: Literal -> Result
transLiteral t = case t of
  LiteralBool boolean -> failure t
  LiteralI32 integer -> failure t
  LiteralIdent ident -> failure t

transExpr :: Expr -> Result
transExpr t = case t of
  Assign expr0 expr1 -> failure t
  Or expr0 expr1 -> failure t
  And expr0 expr1 -> failure t
  Equal expr0 expr1 -> failure t
  NotEqual expr0 expr1 -> failure t
  Less expr0 expr1 -> failure t
  Add expr0 expr1 -> failure t
  Subtract expr0 expr1 -> failure t
  Multiply expr0 expr1 -> failure t
  Divide expr0 expr1 -> failure t
  Modulo expr0 expr1 -> failure t
  Negate expr -> failure t
  Dereference expr -> failure t
  Not expr -> failure t
  Borrow expr -> failure t
  MutableBorrow expr -> failure t
  LiteralExpr literal -> failure t
  ExprIdent ident -> failure t
  FunctionCall ident sepexprlist -> failure t
  ArrayLookup expr0 expr1 -> failure t
  TupleLookup expr integer -> failure t
  IfElseExpr ifelse -> failure t
  BlockExpr block -> failure t
  ArrayElements markexprlist -> failure t
  ArrayRepeat expr integer -> failure t
  ArrayRange integer0 integer1 -> failure t
  TupleConstruct markexprlist -> failure t

transSepExprList :: SepExprList -> Result
transSepExprList t = case t of
  SepExprNil  -> failure t
  SepExprOne expr -> failure t
  SepExprMore expr sepexprlist -> failure t
  SepExprHead expr -> failure t
  SepExprTail sepexprlist expr -> failure t

transMarkExprList :: MarkExprList -> Result
transMarkExprList t = case t of
  MarkExprNil  -> failure t
  MarkExprOne expr -> failure t
  MarkExprMore expr markexprlist -> failure t
  MarkExprHead expr -> failure t
  MarkExprTail markexprlist expr -> failure t

transType :: Type -> Result
transType t = case t of
  Bool  -> failure t
  I32  -> failure t
  Reference type' -> failure t
  MutableReference type' -> failure t
  Array type' integer -> failure t
  Tuple marktypelist -> failure t

transMarkTypeList :: MarkTypeList -> Result
transMarkTypeList t = case t of
  MarkTNil  -> failure t
  MarkTOne type' -> failure t
  MarkTMore type' marktypelist -> failure t
  MarkTHead type' -> failure t
  MarkTTail marktypelist type' -> failure t

transPattern :: Pattern -> Result
transPattern t = case t of
  PatternVariable ident -> failure t
  PatternMutableVariable ident -> failure t
  PatternIgnore  -> failure t
  PatternTuple markpatternlist -> failure t

transMarkPatternList :: MarkPatternList -> Result
transMarkPatternList t = case t of
  MarkPatternNil  -> failure t
  MarkPatternOne pattern -> failure t
  MarkPatternMore pattern markpatternlist -> failure t
  MarkPatternHead pattern -> failure t
  MarkPatternTail markpatternlist pattern -> failure t

transFunDecl :: FunDecl -> Result
transFunDecl t = case t of
  FunDecl ident sepparameterlist block -> failure t
  FunDeclType ident sepparameterlist type' block -> failure t

transParameter :: Parameter -> Result
transParameter t = case t of
  Parameter ident type' -> failure t

transSepParameterList :: SepParameterList -> Result
transSepParameterList t = case t of
  SepPNil  -> failure t
  SepPOne parameter -> failure t
  SepPMore parameter sepparameterlist -> failure t
  SepPHead parameter -> failure t
  SepPTail sepparameterlist parameter -> failure t

transIfElse :: IfElse -> Result
transIfElse t = case t of
  IfElse expr block0 block1 -> failure t

transIfStmt :: IfStmt -> Result
transIfStmt t = case t of
  IfStmt expr block -> failure t

transStmt :: Stmt -> Result
transStmt t = case t of
  FunDeclStmt fundecl -> failure t
  Stmt expr -> failure t
  Break  -> failure t
  Continue  -> failure t
  If ifstmt -> failure t
  IfElseStmt ifelse -> failure t
  Loop block -> failure t
  While expr block -> failure t
  IterableForLoop ident expr block -> failure t
  RangeForLoop ident expr0 expr1 block2 -> failure t
  LetStmtStrict pattern type' expr -> failure t
  LetStmt pattern expr -> failure t
  BlockStmt block -> failure t

transBlock :: Block -> Result
transBlock t = case t of
  Block stmts -> failure t
  BlockWithValue stmts expr -> failure t

transProgram :: Program -> Result
transProgram t = case t of
  Program fundecls -> failure t

transIdent :: Ident -> Result
transIdent t = case t of
  Ident str -> failure t

transBoolean :: Boolean -> Result
transBoolean t = case t of
  Boolean str -> failure t

