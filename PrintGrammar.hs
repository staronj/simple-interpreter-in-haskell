{-# LANGUAGE GADTs, TypeSynonymInstances, FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintGrammar where

-- pretty-printer generated by the BNF converter

import AbsGrammar
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))


instance Print Boolean where
  prt _ (Boolean i) = doc (showString ( i))



instance Print Literal where
  prt i e = case e of
    LiteralBool boolean -> prPrec i 0 (concatD [prt 0 boolean])
    LiteralI32 n -> prPrec i 0 (concatD [prt 0 n])

instance Print Expr where
  prt i e = case e of
    Assign expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "="), prt 0 expr2])
    Or expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "||"), prt 3 expr2])
    And expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString "&&"), prt 4 expr2])
    Equal expr1 expr2 -> prPrec i 4 (concatD [prt 5 expr1, doc (showString "=="), prt 6 expr2])
    NotEqual expr1 expr2 -> prPrec i 4 (concatD [prt 5 expr1, doc (showString "!="), prt 6 expr2])
    Less expr1 expr2 -> prPrec i 4 (concatD [prt 5 expr1, doc (showString "<"), prt 6 expr2])
    Add expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "+"), prt 7 expr2])
    Subtract expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "-"), prt 7 expr2])
    Multiply expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, doc (showString "*"), prt 8 expr2])
    Divide expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, doc (showString "/"), prt 8 expr2])
    Modulo expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, doc (showString "%"), prt 8 expr2])
    Negate expr -> prPrec i 9 (concatD [doc (showString "-"), prt 9 expr])
    Dereference expr -> prPrec i 9 (concatD [doc (showString "*"), prt 9 expr])
    Not expr -> prPrec i 9 (concatD [doc (showString "!"), prt 9 expr])
    Borrow expr -> prPrec i 9 (concatD [doc (showString "&"), prt 9 expr])
    MutableBorrow expr -> prPrec i 9 (concatD [doc (showString "&"), doc (showString "mut"), prt 9 expr])
    LiteralExpr literal -> prPrec i 10 (concatD [prt 0 literal])
    ExprIdent id -> prPrec i 10 (concatD [prt 0 id])
    FunctionCall id sepexprlist -> prPrec i 10 (concatD [prt 0 id, doc (showString "("), prt 0 sepexprlist, doc (showString ")")])
    ArrayLookup expr1 expr2 -> prPrec i 10 (concatD [prt 10 expr1, doc (showString "["), prt 0 expr2, doc (showString "]")])
    TupleLookup expr n -> prPrec i 10 (concatD [prt 10 expr, doc (showString "."), prt 0 n])
    IfElseExpr ifelse -> prPrec i 10 (concatD [prt 0 ifelse])
    BlockExpr block -> prPrec i 10 (concatD [prt 0 block])
    ArrayElements markexprlist -> prPrec i 10 (concatD [doc (showString "["), prt 0 markexprlist, doc (showString "]")])
    ArrayRepeat expr n -> prPrec i 10 (concatD [doc (showString "["), prt 0 expr, doc (showString ";"), prt 0 n, doc (showString "]")])
    ArrayRange n1 n2 -> prPrec i 10 (concatD [doc (showString "["), prt 0 n1, doc (showString ".."), prt 0 n2, doc (showString "]")])
    TupleConstruct markexprlist -> prPrec i 10 (concatD [doc (showString "("), prt 0 markexprlist, doc (showString ")")])

instance Print SepExprList where
  prt i e = case e of
    SepExprNil -> prPrec i 0 (concatD [])
    SepExprOne expr -> prPrec i 0 (concatD [prt 0 expr])
    SepExprMore expr sepexprlist -> prPrec i 0 (concatD [prt 0 expr, doc (showString ","), prt 1 sepexprlist])
    SepExprHead expr -> prPrec i 1 (concatD [prt 0 expr])
    SepExprTail sepexprlist expr -> prPrec i 1 (concatD [prt 1 sepexprlist, doc (showString ","), prt 0 expr])

instance Print MarkExprList where
  prt i e = case e of
    MarkExprNil -> prPrec i 0 (concatD [])
    MarkExprOne expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ",")])
    MarkExprMore expr markexprlist -> prPrec i 0 (concatD [prt 0 expr, doc (showString ","), prt 1 markexprlist])
    MarkExprHead expr -> prPrec i 1 (concatD [prt 0 expr])
    MarkExprTail markexprlist expr -> prPrec i 1 (concatD [prt 1 markexprlist, doc (showString ","), prt 0 expr])

instance Print Type where
  prt i e = case e of
    Bool -> prPrec i 0 (concatD [doc (showString "bool")])
    I32 -> prPrec i 0 (concatD [doc (showString "i32")])
    Reference type_ -> prPrec i 0 (concatD [doc (showString "&"), prt 0 type_])
    MutableReference type_ -> prPrec i 0 (concatD [doc (showString "&"), doc (showString "mut"), prt 0 type_])
    Array type_ n -> prPrec i 0 (concatD [doc (showString "["), prt 0 type_, doc (showString ";"), prt 0 n, doc (showString "]")])
    Tuple marktypelist -> prPrec i 0 (concatD [doc (showString "("), prt 0 marktypelist, doc (showString ")")])

instance Print MarkTypeList where
  prt i e = case e of
    MarkTNil -> prPrec i 0 (concatD [])
    MarkTOne type_ -> prPrec i 0 (concatD [prt 0 type_, doc (showString ",")])
    MarkTMore type_ marktypelist -> prPrec i 0 (concatD [prt 0 type_, doc (showString ","), prt 1 marktypelist])
    MarkTHead type_ -> prPrec i 1 (concatD [prt 0 type_])
    MarkTTail marktypelist type_ -> prPrec i 1 (concatD [prt 1 marktypelist, doc (showString ","), prt 0 type_])

instance Print LetPattern where
  prt i e = case e of
    LetPatternVariable id -> prPrec i 0 (concatD [prt 0 id])
    LetPatternMutableVariable id -> prPrec i 0 (concatD [doc (showString "mut"), prt 0 id])
    LetPatternIgnore -> prPrec i 0 (concatD [doc (showString "_")])
    LetPatternTuple markletpatternlist -> prPrec i 0 (concatD [doc (showString "("), prt 0 markletpatternlist, doc (showString ")")])

instance Print MarkLetPatternList where
  prt i e = case e of
    MarkPatternNil -> prPrec i 0 (concatD [])
    MarkPatternOne letpattern -> prPrec i 0 (concatD [prt 0 letpattern, doc (showString ",")])
    MarkPatternMore letpattern markletpatternlist -> prPrec i 0 (concatD [prt 0 letpattern, doc (showString ","), prt 1 markletpatternlist])
    MarkPatternHead letpattern -> prPrec i 1 (concatD [prt 0 letpattern])
    MarkPatternTail markletpatternlist letpattern -> prPrec i 1 (concatD [prt 1 markletpatternlist, doc (showString ","), prt 0 letpattern])

instance Print FunDecl where
  prt i e = case e of
    FunDecl id sepparameterlist block -> prPrec i 0 (concatD [doc (showString "fn"), prt 0 id, doc (showString "("), prt 0 sepparameterlist, doc (showString ")"), prt 0 block])
    FunDeclType id sepparameterlist type_ block -> prPrec i 0 (concatD [doc (showString "fn"), prt 0 id, doc (showString "("), prt 0 sepparameterlist, doc (showString ")"), doc (showString "->"), prt 0 type_, prt 0 block])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Parameter where
  prt i e = case e of
    Parameter id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])

instance Print SepParameterList where
  prt i e = case e of
    SepPNil -> prPrec i 0 (concatD [])
    SepPOne parameter -> prPrec i 0 (concatD [prt 0 parameter])
    SepPMore parameter sepparameterlist -> prPrec i 0 (concatD [prt 0 parameter, doc (showString ","), prt 1 sepparameterlist])
    SepPHead parameter -> prPrec i 1 (concatD [prt 0 parameter])
    SepPTail sepparameterlist parameter -> prPrec i 1 (concatD [prt 1 sepparameterlist, doc (showString ","), prt 0 parameter])

instance Print IfElse where
  prt i e = case e of
    IfElse expr block1 block2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr, prt 0 block1, doc (showString "else"), prt 0 block2])

instance Print IfStmt where
  prt i e = case e of
    IfStmt expr block -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr, prt 0 block])

instance Print Stmt where
  prt i e = case e of
    FunDeclStmt fundecl -> prPrec i 0 (concatD [prt 0 fundecl])
    Stmt expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
    Break -> prPrec i 0 (concatD [doc (showString "break"), doc (showString ";")])
    Continue -> prPrec i 0 (concatD [doc (showString "continue"), doc (showString ";")])
    If ifstmt -> prPrec i 0 (concatD [prt 0 ifstmt])
    IfElseStmt ifelse -> prPrec i 0 (concatD [prt 0 ifelse])
    Loop block -> prPrec i 0 (concatD [doc (showString "loop"), prt 0 block])
    While expr block -> prPrec i 0 (concatD [doc (showString "while"), prt 0 expr, prt 0 block])
    IterableForLoop id expr block -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString "in"), prt 0 expr, prt 0 block])
    RangeForLoop id expr1 expr2 block -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString "in"), prt 0 expr1, doc (showString ".."), prt 0 expr2, prt 0 block])
    LetStmtStrict letpattern type_ expr -> prPrec i 0 (concatD [doc (showString "let"), prt 0 letpattern, doc (showString ":"), prt 0 type_, doc (showString "="), prt 0 expr, doc (showString ";")])
    LetStmt letpattern expr -> prPrec i 0 (concatD [doc (showString "let"), prt 0 letpattern, doc (showString "="), prt 0 expr, doc (showString ";")])
    BlockStmt block -> prPrec i 0 (concatD [prt 0 block])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Block where
  prt i e = case e of
    Block stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])
    BlockWithValue stmts expr -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, prt 0 expr, doc (showString "}")])

instance Print Program where
  prt i e = case e of
    Program fundecls -> prPrec i 0 (concatD [prt 0 fundecls])


